// ----------------------------
// Scene Setup
// ----------------------------
const scene = new THREE.Scene();
scene.background = new THREE.Color(0x111111);

const camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
camera.position.set(0,5,15);

const renderer = new THREE.WebGLRenderer({antialias:true});
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

// Lights
scene.add(new THREE.AmbientLight(0xffffff,0.6));
const dirLight = new THREE.DirectionalLight(0xffffff,0.8);
dirLight.position.set(5,10,5);
scene.add(dirLight);

// ----------------------------
// Load 3D Car Model
// ----------------------------
let car;
const loader = new THREE.GLTFLoader();
loader.load('assets/models/car.glb', (gltf)=>{
    car = gltf.scene;
    car.scale.set(0.5,0.5,0.5);
    car.position.y = 0.25;
    scene.add(car);
}, undefined, function (error){console.error(error);});

// ----------------------------
// Track
// ----------------------------
const trackPoints = [];
const radius = 20;
for(let i=0;i<=360;i+=5){
    const angle = i * Math.PI/180;
    trackPoints.push(new THREE.Vector3(Math.cos(angle)*radius,0,Math.sin(angle)*radius));
}
const trackGeometry = new THREE.BufferGeometry().setFromPoints(trackPoints);
const trackMaterial = new THREE.LineBasicMaterial({color:0x555555});
const track = new THREE.LineLoop(trackGeometry, trackMaterial);
scene.add(track);

// ----------------------------
// Controls
// ----------------------------
const keys = {ArrowUp:false,ArrowDown:false,ArrowLeft:false,ArrowRight:false};
window.addEventListener('keydown', e=>{if(keys[e.key]!==undefined) keys[e.key]=true;});
window.addEventListener('keyup', e=>{if(keys[e.key]!==undefined) keys[e.key]=false;});

// Game variables
let speed=0, lap=0;

// ----------------------------
// Animate Loop
// ----------------------------
function animate(){
    requestAnimationFrame(animate);
    if(!car) return;

    if(keys.ArrowUp) speed+=0.05;
    if(keys.ArrowDown) speed-=0.03;
    speed*=0.95;

    if(keys.ArrowLeft) car.rotation.y += 0.03;
    if(keys.ArrowRight) car.rotation.y -= 0.03;

    car.position.x -= Math.sin(car.rotation.y)*speed;
    car.position.z -= Math.cos(car.rotation.y)*speed;

    // Check lap
    const finish = trackPoints[0];
    if(Math.hypot(car.position.x-finish.x, car.position.z-finish.z)<1 && speed>0.5){
        lap++;
        document.getElementById('lapCounter').innerText="Lap: "+lap;
    }

    // Camera follow
    camera.position.x = car.position.x + Math.sin(car.rotation.y)*10;
    camera.position.z = car.position.z + Math.cos(car.rotation.y)*10;
    camera.position.y = car.position.y + 5;
    camera.lookAt(car.position);

    renderer.render(scene, camera);
}
animate();

// Resize
window.addEventListener('resize', ()=>{
    camera.aspect = window.innerWidth/window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
});
